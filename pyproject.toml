[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sonetsim"
version = "0.0.1"
description = "A Social Network Simulator Based on Large Language Model Agents"
authors = [
    {name = "Shawn/Yuxuan Tong", email = "tongyuxuan361@gmail.com"},
    # TODO: add emails if needed
    {name = "Sunqi Fan"},
    {name = "Zhihang Zhu"}
]
license = {text = "Apache-2.0"}
requires-python = ">=3.10"
dependencies = [
    "camel-oasis",
    "matplotlib",
    "networkx",
    "pandas",
    "pycairo",
]

[project.optional-dependencies]
frontend = ["streamlit", "watchdog", "nest_asyncio", "stqdm", "altair[all]"]
dev = [
    "pre-commit",
    "notebook",
    "ipywidgets",
    # Keep consistent with `.pre-commit-config.yaml`
    "ruff==0.11.9",
    "mypy==1.15.0",
    "pandas-stubs",
    "matplotlib-stubs",
    "types-tqdm",
    "types-colorama",
    "types-networkx",
    "types-openpyxl",
    "types-python-dateutil",
]

[tool.hatch.build.targets.wheel]
packages = ["src/sonetsim"]

# -------------------------------
# tool.ruff - Linting configuration
# -------------------------------
[tool.ruff]
# Note: While the formatter will attempt to format lines such that they remain within the line-length,
# it isn't a hard upper bound, and formatted lines may exceed the line-length.
line-length = 120

[tool.ruff.lint]
isort = {known-first-party = ["verl"]}
# c.f. https://github.com/vllm-project/vllm/blob/ce8d6b75fc0586045df75ee1568a5b5f9957251b/pyproject.toml
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # isort
    "I",
    "G",
]
ignore = [
    # star imports
    "F405", "F403",
    # lambda expression assignment
    "E731",
    # Loop control variable not used within loop body
    "B007",
    # f-string format
    "UP032",
    # Can remove once 3.10+ is the minimum Python version
    "UP007",
    # `.log()` statement uses f-string
    "G004",
]

# -------------------------------
# tool.setuptools - Additional config
# -------------------------------
[tool.setuptools]
# True means `setuptools` will attempt to include all relevant files in package_data automatically.
# This corresponds to `include_package_data=True` in setup.py.
include-package-data = true

# We read the version from a file in 'verl/version/version'
[tool.setuptools.dynamic]
version = {file = "verl/version/version"}

# If you need to mimic `package_dir={'': '.'}`:
[tool.setuptools.package-dir]
"" = "."

# If you need to include specific non-Python data (like YAML files or version file):
# This is the rough equivalent of package_data={'': ['version/*'], 'verl': ['trainer/config/*.yaml']}
[tool.setuptools.package-data]
verl = [
  "version/*",
  "trainer/config/*.yaml"
]

# -------------------------------
# tool.mypy - Type checking configuration
# -------------------------------
# error: Skipping analyzing "...": module is installed, but missing library stubs or py.typed marker  [import-untyped]
# c.f. https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-library-stubs-or-py-typed-marker
[[tool.mypy.overrides]]
module = ["sonetsim.*","nest_asyncio.*", "stqdm.*"]
follow_untyped_imports = true

# For modules not properly typed
[[tool.mypy.overrides]]
module = ["camel.*", "oasis.*"]
ignore_missing_imports = true
